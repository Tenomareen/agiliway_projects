{"ast":null,"code":"var _jsxFileName = \"E:\\\\React-apps\\\\agiliway\\\\src\\\\components\\\\3TaskRFF\\\\FormRFF.js\";\nimport React from \"react\";\nimport \"./styles.scss\";\nimport { Form, Field } from \"react-final-form\";\nimport MyField from \"./MyField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst composeValidators = validators => (value, allValues) => {\n  let error = undefined;\n\n  for (let i = 0; i < validators.length; i++) {\n    error = validators[i](value, allValues);\n\n    if (error) {\n      return error;\n    }\n  }\n};\n\nconst commonValidators = {\n  required: (value = \"\") => {\n    return value.length > 0 ? undefined : \"Required\";\n  },\n  sixSymbols: (value, allValues) => {\n    return value.length > 5 ? undefined : \"Too short\";\n  },\n  comparePasswords: (value, allValues) => {\n    return allValues.password === allValues.confirm ? undefined : \"Password don`t match\";\n  }\n};\nconst validators = {\n  name: composeValidators([commonValidators.required, commonValidators.sixSymbols]),\n  email: composeValidators([commonValidators.required, commonValidators.sixSymbols]),\n  password: composeValidators([commonValidators.required, commonValidators.sixSymbols]),\n  confirm: composeValidators([commonValidators.required, commonValidators.sixSymbols, commonValidators.comparePasswords])\n};\n\nclass FormsRFF extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fields: {\n        name: {\n          name: \"name\",\n          type: \"text\",\n          title: \"Name\",\n          placeholder: \"John Smith\",\n          label: \"Name\",\n          validators: [this.required, this.sixSymbols]\n        },\n        emailText: {\n          name: \"email\",\n          type: \"text\",\n          title: \"Email\",\n          placeholder: \"example@ex.net\",\n          label: \"Email\"\n        },\n        passwordText: {\n          name: \"password\",\n          type: \"password\",\n          title: \"Password\",\n          placeholder: \"Qwe123\",\n          autoComplete: \"false\",\n          label: \"Password\"\n        },\n        confirmPasswordText: {\n          name: \"confirm\",\n          type: \"password\",\n          title: \"Confirm Password\",\n          placeholder: \"Qwe123\",\n          autoComplete: \"false\",\n          label: \"Confirm Password\"\n        }\n      }\n    };\n\n    this.onSubmit = values => {\n      console.log(values);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: this.onSubmit,\n        render: ({\n          handleSubmit,\n          form,\n          submitting,\n          pristine\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title\",\n            children: \"Form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [Object.entries(this.state.fields).map(([fieldName, fieldState]) => {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(Field, {\n                  validate: validators[fieldState.name],\n                  name: fieldState.name,\n                  component: MyField,\n                  title: fieldState.title,\n                  type: fieldState.type,\n                  label: fieldState.label,\n                  className: \"input\",\n                  placeholder: fieldState.placeholder,\n                  autoComplete: fieldState.autoComplete\n                }, fieldState.title, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false);\n            }), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: form.reset,\n              className: \"button\",\n              disabled: submitting || pristine,\n              children: [\" \", \"Reset\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"button\",\n              disabled: submitting,\n              children: [\" \", \"Submit\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default FormsRFF;","map":{"version":3,"sources":["E:/React-apps/agiliway/src/components/3TaskRFF/FormRFF.js"],"names":["React","Form","Field","MyField","composeValidators","validators","value","allValues","error","undefined","i","length","commonValidators","required","sixSymbols","comparePasswords","password","confirm","name","email","FormsRFF","Component","state","fields","type","title","placeholder","label","emailText","passwordText","autoComplete","confirmPasswordText","onSubmit","values","console","log","render","handleSubmit","form","submitting","pristine","Object","entries","map","fieldName","fieldState","reset"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./styles.scss\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport MyField from \"./MyField\";\r\n\r\n\r\nconst composeValidators = (validators) => (value, allValues) => {\r\n    let error = undefined;\r\n    for (let i = 0; i < validators.length; i++) {\r\n      error = validators[i](value, allValues);\r\n      if (error) {\r\n        return error;\r\n      }\r\n    }\r\n  };\r\n\r\nconst commonValidators = {\r\n  required: (value = \"\") => {\r\n    return value.length > 0 ? undefined : \"Required\";\r\n  },\r\n\r\n  sixSymbols: (value, allValues) => {\r\n    return value.length > 5 ? undefined : \"Too short\";\r\n  },\r\n\r\n  comparePasswords: (value, allValues) => {\r\n    return allValues.password === allValues.confirm\r\n      ? undefined\r\n      : \"Password don`t match\";\r\n  },\r\n};\r\n\r\nconst validators = {\r\n  name: composeValidators([commonValidators.required,commonValidators.sixSymbols]),\r\n  email: composeValidators([commonValidators.required,commonValidators.sixSymbols]),\r\n  password: composeValidators([commonValidators.required,commonValidators.sixSymbols]),\r\n  confirm:  composeValidators([commonValidators.required,commonValidators.sixSymbols,commonValidators.comparePasswords]),\r\n};\r\n\r\nclass FormsRFF extends React.Component {\r\n  state = {\r\n    fields: {\r\n      name: {\r\n        name: \"name\",\r\n        type: \"text\",\r\n        title: \"Name\",\r\n        placeholder: \"John Smith\",\r\n        label: \"Name\",\r\n        validators: [this.required, this.sixSymbols],\r\n      },\r\n      emailText: {\r\n        name: \"email\",\r\n        type: \"text\",\r\n        title: \"Email\",\r\n        placeholder: \"example@ex.net\",\r\n        label: \"Email\",\r\n      },\r\n      passwordText: {\r\n        name: \"password\",\r\n        type: \"password\",\r\n        title: \"Password\",\r\n        placeholder: \"Qwe123\",\r\n        autoComplete: \"false\",\r\n        label: \"Password\",\r\n      },\r\n      confirmPasswordText: {\r\n        name: \"confirm\",\r\n        type: \"password\",\r\n        title: \"Confirm Password\",\r\n        placeholder: \"Qwe123\",\r\n        autoComplete: \"false\",\r\n        label: \"Confirm Password\",\r\n      },\r\n    },\r\n  };\r\n\r\n  onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Form\r\n          onSubmit={this.onSubmit}\r\n          render={({ handleSubmit, form, submitting, pristine }) => (\r\n            <div className=\"wrapper\">\r\n              <div className=\"title\">Form</div>\r\n              <form onSubmit={handleSubmit}>\r\n                {Object.entries(this.state.fields).map(\r\n                  ([fieldName, fieldState]) => {\r\n                    return (\r\n                      <>\r\n                        <Field\r\n                          validate={validators[fieldState.name]}\r\n                          name={fieldState.name}\r\n                          component={MyField}\r\n                          title={fieldState.title}\r\n                          key={fieldState.title}\r\n                          type={fieldState.type}\r\n                          label={fieldState.label}\r\n                          className=\"input\"\r\n                          placeholder={fieldState.placeholder}\r\n                          autoComplete={fieldState.autoComplete}\r\n                        ></Field>\r\n                      </>\r\n                    );\r\n                  }\r\n                )}\r\n\r\n                <button\r\n                  onClick={form.reset}\r\n                  className=\"button\"\r\n                  disabled={submitting || pristine}\r\n                >\r\n                  {\" \"}\r\n                  Reset{\" \"}\r\n                </button>\r\n                <button type=\"submit\" className=\"button\" disabled={submitting}>\r\n                  {\" \"}\r\n                  Submit{\" \"}\r\n                </button>\r\n              </form>\r\n            </div>\r\n          )}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormsRFF;\r\n"]},"metadata":{},"sourceType":"module"}