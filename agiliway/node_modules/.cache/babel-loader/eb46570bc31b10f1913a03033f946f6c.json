{"ast":null,"code":"var _jsxFileName = \"E:\\\\React-apps\\\\agiliway\\\\src\\\\components\\\\2TaskForms\\\\FormsInputs.js\";\nimport React from \"react\";\nimport \"./styles.scss\";\nimport { Field } from \"./Field\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class FormsComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fields: {\n        nameText: {\n          type: \"text\",\n          name: \"nameText\",\n          label: \"Name text\",\n          value: \"\",\n          error: null,\n          validator: (value = \"\") => {\n            return value.match(/^[a-zA-Z]+$/) ? false : !value.length ? \"Required\" : \"Invalid Name\";\n          }\n        },\n        emailText: {\n          type: \"text\",\n          name: \"emailText\",\n          label: \"Email text\",\n          value: \"\",\n          error: null,\n          validator: (value = \"\") => {\n            return value.match(/^[a-zA-Z0-9]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/) ? false : \"Invalid Email\";\n          }\n        },\n        passwordText: {\n          type: \"password\",\n          name: \"passwordText\",\n          label: \"Password text\",\n          value: \"\",\n          error: null,\n          validator: (value = \"\") => {\n            return value.match(/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]{6,}/g) ? false : !value.length ? \"Required\" : \"Invalid Password\";\n          }\n        },\n        confirmPasswordText: {\n          type: \"password\",\n          name: \"confirmPasswordText\",\n          label: \"Confirm Password text\",\n          value: \"\",\n          error: null,\n          validator: (value, password) => {\n            return value === password ? false : \"Passwords didn`t match\";\n          }\n        }\n      }\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const {\n        nameText,\n        emailText,\n        passwordText,\n        confirmPasswordText\n      } = this.state.fields;\n      const {\n        fields\n      } = this.state;\n      this.setState({\n        fields: { ...this.state.fields,\n          nameText: { ...nameText,\n            error: nameText.validator(nameText.value)\n          },\n          emailText: { ...emailText,\n            error: emailText.validator(emailText.value)\n          },\n          passwordText: { ...passwordText,\n            error: passwordText.validator(passwordText.value)\n          },\n          confirmPasswordText: { ...confirmPasswordText,\n            error: confirmPasswordText.validator(confirmPasswordText.value, passwordText.value)\n          }\n        }\n      });\n      const array = [];\n      Object.entries(fields).forEach(([fieldName, fieldState]) => {\n        array.push(fieldState.error);\n      });\n      array.every(item => item === false) && console.log(this.state);\n    };\n\n    this.handleChange = event => {\n      const {\n        value,\n        name\n      } = event.target;\n      const currentField = this.state.fields[name];\n      const {\n        isError\n      } = this.state;\n      const {\n        passwordText,\n        confirmPasswordText\n      } = this.state.fields;\n      const error = value.length > 0 ? currentField.validator(value, passwordText.value) : false;\n\n      if (name === \"passwordText\") {\n        const error1 = this.state.fields.confirmPasswordText.validator(confirmPasswordText.value, value);\n        this.setState({\n          fields: { ...this.state.fields,\n            [name]: { ...currentField,\n              value,\n              error\n            },\n            confirmPasswordText: { ...this.state.fields.confirmPasswordText,\n              error: error1\n            }\n          },\n          isError: error && !isError ? true : false\n        });\n      } else this.setState({\n        fields: { ...this.state.fields,\n          [name]: { ...currentField,\n            value,\n            error\n          }\n        },\n        isError: error && !isError ? true : false\n      });\n    };\n\n    this.handleReset = event => {\n      event.preventDefault();\n      const {\n        fields\n      } = this.state;\n      const reset = Object.entries(fields).reduce((resetAccumulator, [fieldName, fieldState]) => {\n        return { ...resetAccumulator,\n          [fieldName]: fieldState.value = \"\",\n          [fieldName]: fieldState.error = null\n        };\n      }, {});\n      this.setState({ ...this.state.fields,\n        reset\n      });\n    };\n  }\n\n  render() {\n    const {\n      fields\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"inputs\",\n          onSubmit: this.handleSubmit,\n          children: [Object.entries(fields).map(([fieldName, fieldState]) => {\n            const {\n              name,\n              type,\n              error,\n              value,\n              label\n            } = fieldState;\n            return /*#__PURE__*/_jsxDEV(Field, {\n              name: name,\n              label: label,\n              error: error,\n              value: value,\n              type: type,\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 32\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttons\",\n            onClick: this.handleReset,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttons\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\nexport default FormsComponent;","map":{"version":3,"sources":["E:/React-apps/agiliway/src/components/2TaskForms/FormsInputs.js"],"names":["React","Field","FormsComponent","Component","state","fields","nameText","type","name","label","value","error","validator","match","length","emailText","passwordText","confirmPasswordText","password","handleSubmit","event","preventDefault","setState","array","Object","entries","forEach","fieldName","fieldState","push","every","item","console","log","handleChange","target","currentField","isError","error1","handleReset","reset","reduce","resetAccumulator","render","map"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./styles.scss\";\r\nimport { Field } from \"./Field\";\r\n\r\nexport class FormsComponent extends React.Component {\r\n    state = {\r\n        fields: {\r\n            nameText: {\r\n                type:\"text\",\r\n                name: \"nameText\",\r\n                label: \"Name text\",\r\n                value: \"\",\r\n                error: null,\r\n                validator: (value=\"\") => {\r\n                    return(value.match(/^[a-zA-Z]+$/) ? false : !value.length ? \"Required\" : \"Invalid Name\")\r\n                },\r\n            },\r\n            emailText: {\r\n                type:\"text\",\r\n                name: \"emailText\",\r\n                label: \"Email text\",\r\n                value: \"\",\r\n                error: null,\r\n                validator: (value=\"\") => {\r\n                    return value.match(/^[a-zA-Z0-9]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/) ? false : \"Invalid Email\";\r\n                },\r\n            },\r\n            passwordText: {\r\n                type:\"password\",\r\n                name: \"passwordText\",\r\n                label: \"Password text\",\r\n                value: \"\",\r\n                error: null,\r\n                validator: (value=\"\") => {\r\n                    return (value.match(/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]{6,}/g)\r\n                    ? false : !value.length ? \"Required\" : \"Invalid Password\");\r\n                },\r\n            },\r\n            confirmPasswordText: {\r\n                type:\"password\",\r\n                name: \"confirmPasswordText\",\r\n                label: \"Confirm Password text\",\r\n                value: \"\",\r\n                error: null,\r\n                validator: (value,password) => {\r\n                    return (value === password ? false : \"Passwords didn`t match\");\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    handleSubmit = (event) => { \r\n        event.preventDefault();\r\n        const { nameText, emailText, passwordText, confirmPasswordText} = this.state.fields;\r\n        const { fields } = this.state;\r\n       this.setState({\r\n           fields:{...this.state.fields,\r\n               nameText: {...nameText,error: nameText.validator(nameText.value)},\r\n               emailText: {...emailText,error: emailText.validator(emailText.value)},\r\n               passwordText: {...passwordText,error:passwordText.validator(passwordText.value)},\r\n               confirmPasswordText: {...confirmPasswordText,error: confirmPasswordText.validator(confirmPasswordText.value,passwordText.value)},  \r\n           }    \r\n           });\r\n           const array = [];\r\n           Object.entries(fields).forEach(([fieldName, fieldState]) => {\r\n           array.push(fieldState.error);},)\r\n           array.every(item => item === false ) && console.log(this.state);\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const { value, name } = event.target;\r\n        const currentField = this.state.fields[name];\r\n        const { isError } = this.state;\r\n        const { passwordText, confirmPasswordText } = this.state.fields;\r\n        const error = value.length > 0 ? currentField.validator(value, passwordText.value) : false;\r\n        if(name === \"passwordText\"){\r\n        const error1 = this.state.fields.confirmPasswordText.validator(confirmPasswordText.value, value);\r\n        this.setState({\r\n            fields: {\r\n                ...this.state.fields,\r\n                [name]: { ...currentField, value, error},\r\n                confirmPasswordText: { ...this.state.fields.confirmPasswordText, error: error1},\r\n            },\r\n            isError: error && !isError ? true : false\r\n        });\r\n        }\r\n        else this.setState({\r\n            fields: {\r\n                ...this.state.fields,\r\n                [name]: { ...currentField, value, error},\r\n            },\r\n            isError: error && !isError ? true : false\r\n        });\r\n    };\r\n\r\n    handleReset = (event) => {\r\n        event.preventDefault();\r\n        const { fields } = this.state;\r\n        const reset = Object.entries(fields).reduce((resetAccumulator,[fieldName, fieldState] ) => {\r\n             return ({ ...resetAccumulator, [fieldName]: fieldState.value = \"\",  [fieldName]: fieldState.error = null});\r\n        }, {})\r\n        this.setState({\r\n            ...this.state.fields,reset,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { fields } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"wrapper\" >\r\n                    <form className=\"inputs\" onSubmit={this.handleSubmit}> \r\n                    {Object.entries(fields).map(([fieldName, fieldState]) => {\r\n                        const {name, type, error, value, label} = fieldState;\r\n                        return <Field\r\n                        name={name}\r\n                        label={label}\r\n                        error={error}\r\n                        value={value}\r\n                        type={type}\r\n                        onChange={this.handleChange}\r\n                        />;\r\n                    })}\r\n                        <button className=\"buttons\" onClick={this.handleReset}>Reset</button>\r\n                        <button className=\"buttons\">Submit</button>\r\n                    </form>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormsComponent;"]},"metadata":{},"sourceType":"module"}