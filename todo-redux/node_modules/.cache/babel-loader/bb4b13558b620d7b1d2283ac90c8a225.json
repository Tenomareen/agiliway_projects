{"ast":null,"code":"var _jsxFileName = \"E:\\\\React-apps\\\\todo-redux\\\\src\\\\components\\\\Todo\\\\Todo.js\";\nimport React from \"react\";\nimport { addTodoAction, removeTodoAction } from \"../store/store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class TodoList extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      fields: {\n        todoText: {\n          name: \"todoText\",\n          label: \"Todo text\",\n          value: \"\",\n          error: null,\n          validator: function () {\n            let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n            return value ? false : \"Required\";\n          }\n        }\n      }\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n    };\n\n    this.handleChange = event => {\n      const {\n        value,\n        name\n      } = event.target;\n      const currentField = this.state.fields[name];\n      this.setState({\n        fields: { ...this.state.fields,\n          [name]: { ...currentField,\n            value\n          }\n        }\n      }); //  console.log(this.state.fields.todoText.value);\n    };\n\n    this.mapStateToProps = state => {\n      return {\n        todoList: state.todoList\n      };\n    };\n\n    this.mapDispatchToProps = dispatch => {\n      return {\n        addTodo: () => {\n          dispatch(addTodoAction(this.state.fields.todoText));\n          console.log(this.state.fields.todoText.value);\n        },\n        removeTodo: () => {\n          dispatch(removeTodoAction());\n        }\n      };\n    };\n  }\n\n  // handleAdding = (event) => {\n  //     let todoItem = {\n  //         value : \"\"\n  //     }\n  //     const { todoList, value } = this.state;\n  //     todoItem.value = this.state.fields.todoText.value;\n  //     event.preventDefault();\n  //     this.setState({\n  //         todoList : [...todoList,todoItem],\n  //         fields: {\n  //             todoText: {\n  //                 name: \"todoText\",\n  //                 label: \"Todo text\",\n  //                 value: \"\",\n  //     }}});\n  //     console.log(value);\n  //    // this.state.fields.todoText.value = \"\";\n  // }\n  render() {\n    console.log(this.props);\n    const {\n      todoList,\n      fields: {\n        todoText\n      }\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Todo Add Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              paddingRight: \"20px\"\n            },\n            htmlFor: todoText.name,\n            children: todoText.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: this.handleChange,\n            value: todoText.value,\n            name: todoText.name,\n            id: todoText.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), todoText.value.length === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Field can't be empty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 57\n          }, this), todoText.value.length > 15 && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Field contains too much symbols\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 56\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: todoText.value.length === 0 || todoText.value.length > 15,\n            style: {\n              marginLeft: \"20px\"\n            },\n            onClick: this.addTodo,\n            children: \"Add todo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.removeTodo,\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\nexport default TodoList;","map":{"version":3,"sources":["E:/React-apps/todo-redux/src/components/Todo/Todo.js"],"names":["React","addTodoAction","removeTodoAction","TodoList","Component","state","fields","todoText","name","label","value","error","validator","handleSubmit","event","preventDefault","handleChange","target","currentField","setState","mapStateToProps","todoList","mapDispatchToProps","dispatch","addTodo","console","log","removeTodo","render","props","width","paddingRight","length","marginLeft"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { addTodoAction, removeTodoAction } from \"../store/store\";\r\n\r\nexport class TodoList extends React.Component {\r\n    state = {\r\n        fields: {\r\n            todoText: {\r\n                name: \"todoText\",\r\n                label: \"Todo text\",\r\n                value: \"\",\r\n                error: null,\r\n                validator: (value = \"\") => {\r\n                    return value ? false : \"Required\";\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    handleSubmit = (event) => { \r\n        event.preventDefault();\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        const { value, name } = event.target;\r\n        const currentField = this.state.fields[name];\r\n        this.setState({\r\n            fields: {\r\n                ...this.state.fields,\r\n                [name]: { ...currentField, value },\r\n            },\r\n        });\r\n      //  console.log(this.state.fields.todoText.value);\r\n    };\r\n\r\n    // handleAdding = (event) => {\r\n    //     let todoItem = {\r\n    //         value : \"\"\r\n    //     }\r\n    //     const { todoList, value } = this.state;\r\n    //     todoItem.value = this.state.fields.todoText.value;\r\n    //     event.preventDefault();\r\n    //     this.setState({\r\n    //         todoList : [...todoList,todoItem],\r\n    //         fields: {\r\n    //             todoText: {\r\n    //                 name: \"todoText\",\r\n    //                 label: \"Todo text\",\r\n    //                 value: \"\",\r\n    //     }}});\r\n    //     console.log(value);\r\n    //    // this.state.fields.todoText.value = \"\";\r\n    // }\r\n\r\n    render() {\r\n        console.log(this.props)\r\n        const {\r\n            todoList,\r\n            fields: { todoText },\r\n        } = this.state;\r\n\r\n        return (\r\n            <>\r\n                {/* <div>\r\n                    <div>Todo List</div>\r\n                    {todoList.map((todo) => (\r\n                        <div>{todo.value}</div>\r\n                    ))}\r\n                </div> */}\r\n                <hr style={{ width: \"100%\" }} />\r\n                <div>\r\n                    <div>Todo Add Form</div>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <label style={{ paddingRight: \"20px\" }} htmlFor={todoText.name}>\r\n                            {todoText.label}\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            onChange={this.handleChange}\r\n                            value={todoText.value}\r\n                            name={todoText.name}\r\n                            id={todoText.name}\r\n                        />\r\n                        {todoText.value.length === 0 && <span>Field can't be empty</span>}\r\n                        {todoText.value.length > 15 && <span>Field contains too much symbols</span>}\r\n                        <button\r\n                            disabled={todoText.value.length === 0 || todoText.value.length > 15 }\r\n                            style={{ marginLeft: \"20px\" }} onClick={this.addTodo}\r\n                        >\r\n                            Add todo\r\n                        </button>\r\n                        {/* disabled={this.state.todoList.length === 0}  || todoList.length === 9  */}\r\n                        <button  onClick={this.removeTodo}>Remove</button>\r\n                    </form>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    mapStateToProps = (state) => {\r\n        return {\r\n          todoList: state.todoList,\r\n        };\r\n      };\r\n\r\n    mapDispatchToProps = (dispatch) => {\r\n        return {\r\n            addTodo: () => {\r\n                dispatch(addTodoAction(this.state.fields.todoText));\r\n                console.log(this.state.fields.todoText.value);\r\n            },\r\n            removeTodo: () => {\r\n                dispatch(removeTodoAction());\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}