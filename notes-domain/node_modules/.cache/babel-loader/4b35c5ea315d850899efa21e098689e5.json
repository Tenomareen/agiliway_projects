{"ast":null,"code":"import { CLOSE_ALL_NOTES, GET_ALL_NOTES, GET_ALL_NOTES_IN_PROGRESS } from '../action-types/note.action-types';\nconst initialState = {\n  noteList: [],\n  isLoading: true\n};\n\nconst notesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_ALL_NOTES:\n      return {\n        isLoading: false,\n        noteList: action.payload.data\n      };\n\n    case GET_ALL_NOTES_IN_PROGRESS:\n      return { ...state,\n        isLoading: true\n      };\n\n    case CLOSE_ALL_NOTES:\n      return initialState;\n\n    case GET_ALL_NOTES_ERROR:\n      return { ...state,\n        isLoading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default notesReducer;","map":{"version":3,"sources":["E:/agiliway_projects/agiliway_projects/notes-domain/src/pages/Notes/reducers/notesReducer.js"],"names":["CLOSE_ALL_NOTES","GET_ALL_NOTES","GET_ALL_NOTES_IN_PROGRESS","initialState","noteList","isLoading","notesReducer","state","action","type","payload","data","GET_ALL_NOTES_ERROR"],"mappings":"AAAA,SACEA,eADF,EAEEC,aAFF,EAGEC,yBAHF,QAIO,mCAJP;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,SAAS,EAAE;AAFQ,CAArB;;AAKA,MAAMC,YAAY,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,aAAL;AACE,aAAO;AAAEI,QAAAA,SAAS,EAAE,KAAb;AAAoBD,QAAAA,QAAQ,EAAEI,MAAM,CAACE,OAAP,CAAeC;AAA7C,OAAP;;AACF,SAAKT,yBAAL;AACE,aAAO,EAAE,GAAGK,KAAL;AAAYF,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACF,SAAKL,eAAL;AACE,aAAOG,YAAP;;AACF,SAAKS,mBAAL;AACE,aAAO,EAAC,GAAGL,KAAJ;AAAWF,QAAAA,SAAS,EAAE;AAAtB,OAAP;;AACF;AACE,aAAOE,KAAP;AAVJ;AAYD,CAbD;;AAeA,eAAeD,YAAf","sourcesContent":["import {\n  CLOSE_ALL_NOTES,\n  GET_ALL_NOTES,\n  GET_ALL_NOTES_IN_PROGRESS,\n} from '../action-types/note.action-types';\n\nconst initialState = {\n  noteList: [],\n  isLoading: true,\n};\n\nconst notesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_NOTES:\n      return { isLoading: false, noteList: action.payload.data };\n    case GET_ALL_NOTES_IN_PROGRESS:\n      return { ...state, isLoading: true };\n    case CLOSE_ALL_NOTES:\n      return initialState;\n    case GET_ALL_NOTES_ERROR:\n      return {...state, isLoading: false };\n    default:\n      return state;\n  }\n};\n\nexport default notesReducer;\n"]},"metadata":{},"sourceType":"module"}