{"ast":null,"code":"import { message } from 'antd';\nimport { deleteNote, getNoteById, getNotes, postNote, putNote } from '../../../api/notes';\nimport { editNoteSuccessAction, getNotesInProgressAction, modalNoteProgressAction, modalNoteShowAction, modalNoteSuccessAction, getNotesAction, getNoteListErrorAction } from '../actions/actions';\nexport const getNoteList = () => Promise.resolve(dispatch => {\n  dispatch(getNotesInProgressAction());\n  getNotes().then(response => {\n    dispatch(getNotesAction(response.data));\n  }).catch(() => dispatch(getNoteListErrorAction()));\n});\nexport const createNote = note => dispatch => {\n  dispatch(modalNoteProgressAction());\n  postNote(note).then(() => {\n    dispatch(modalNoteSuccessAction());\n    message.success('New Note was added');\n    dispatch(getNoteList());\n  });\n};\nexport const deleteNoteById = id => dispatch => {\n  dispatch(modalNoteProgressAction());\n  deleteNote(id).then(() => {\n    dispatch(modalNoteSuccessAction());\n    message.success('Note was deleted');\n    dispatch(getNoteList());\n  });\n};\nexport const editNote = (note, id) => dispatch => {\n  dispatch(modalNoteProgressAction());\n  putNote(note, id).then(() => {\n    dispatch(modalNoteSuccessAction());\n    message.success('Note was edited');\n    dispatch(getNoteList());\n  });\n};\nexport const getNoteForEdit = id => dispatch => {\n  dispatch(modalNoteShowAction('edit'));\n  dispatch(modalNoteProgressAction());\n  getNoteById(id).then(response => {\n    dispatch(editNoteSuccessAction(response));\n  });\n};","map":{"version":3,"sources":["E:/agiliway_projects/agiliway_projects/notes-domain/src/pages/Notes/thunks/notesThunk.js"],"names":["message","deleteNote","getNoteById","getNotes","postNote","putNote","editNoteSuccessAction","getNotesInProgressAction","modalNoteProgressAction","modalNoteShowAction","modalNoteSuccessAction","getNotesAction","getNoteListErrorAction","getNoteList","Promise","resolve","dispatch","then","response","data","catch","createNote","note","success","deleteNoteById","id","editNote","getNoteForEdit"],"mappings":"AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,SACEC,UADF,EAEEC,WAFF,EAGEC,QAHF,EAIEC,QAJF,EAKEC,OALF,QAMO,oBANP;AAOA,SACEC,qBADF,EAEEC,wBAFF,EAGEC,uBAHF,EAIEC,mBAJF,EAKEC,sBALF,EAMEC,cANF,EAOEC,sBAPF,QAQO,oBARP;AAUA,OAAO,MAAMC,WAAW,GAAG,MAAMC,OAAO,CAACC,OAAR,CAAiBC,QAAD,IAAc;AAC7DA,EAAAA,QAAQ,CAACT,wBAAwB,EAAzB,CAAR;AACAJ,EAAAA,QAAQ,GAAGc,IAAX,CAAiBC,QAAD,IAAc;AAC5BF,IAAAA,QAAQ,CAACL,cAAc,CAACO,QAAQ,CAACC,IAAV,CAAf,CAAR;AACD,GAFD,EAGGC,KAHH,CAGS,MAAMJ,QAAQ,CAACJ,sBAAsB,EAAvB,CAHvB;AAID,CANgC,CAA1B;AAQP,OAAO,MAAMS,UAAU,GAAIC,IAAD,IAAWN,QAAD,IAAc;AAChDA,EAAAA,QAAQ,CAACR,uBAAuB,EAAxB,CAAR;AACAJ,EAAAA,QAAQ,CAACkB,IAAD,CAAR,CAAeL,IAAf,CAAoB,MAAM;AACxBD,IAAAA,QAAQ,CAACN,sBAAsB,EAAvB,CAAR;AACAV,IAAAA,OAAO,CAACuB,OAAR,CAAgB,oBAAhB;AACAP,IAAAA,QAAQ,CAACH,WAAW,EAAZ,CAAR;AACD,GAJD;AAKD,CAPM;AASP,OAAO,MAAMW,cAAc,GAAIC,EAAD,IAAST,QAAD,IAAc;AAClDA,EAAAA,QAAQ,CAACR,uBAAuB,EAAxB,CAAR;AACAP,EAAAA,UAAU,CAACwB,EAAD,CAAV,CAAeR,IAAf,CAAoB,MAAM;AACxBD,IAAAA,QAAQ,CAACN,sBAAsB,EAAvB,CAAR;AACAV,IAAAA,OAAO,CAACuB,OAAR,CAAgB,kBAAhB;AACAP,IAAAA,QAAQ,CAACH,WAAW,EAAZ,CAAR;AACD,GAJD;AAKD,CAPM;AASP,OAAO,MAAMa,QAAQ,GAAG,CAACJ,IAAD,EAAOG,EAAP,KAAeT,QAAD,IAAc;AAClDA,EAAAA,QAAQ,CAACR,uBAAuB,EAAxB,CAAR;AACAH,EAAAA,OAAO,CAACiB,IAAD,EAAOG,EAAP,CAAP,CAAkBR,IAAlB,CAAuB,MAAM;AAC3BD,IAAAA,QAAQ,CAACN,sBAAsB,EAAvB,CAAR;AACAV,IAAAA,OAAO,CAACuB,OAAR,CAAgB,iBAAhB;AACAP,IAAAA,QAAQ,CAACH,WAAW,EAAZ,CAAR;AACD,GAJD;AAKD,CAPM;AASP,OAAO,MAAMc,cAAc,GAAIF,EAAD,IAAST,QAAD,IAAc;AAClDA,EAAAA,QAAQ,CAACP,mBAAmB,CAAC,MAAD,CAApB,CAAR;AACAO,EAAAA,QAAQ,CAACR,uBAAuB,EAAxB,CAAR;AACAN,EAAAA,WAAW,CAACuB,EAAD,CAAX,CAAgBR,IAAhB,CAAsBC,QAAD,IAAc;AACjCF,IAAAA,QAAQ,CAACV,qBAAqB,CAACY,QAAD,CAAtB,CAAR;AACD,GAFD;AAGD,CANM","sourcesContent":["import { message } from 'antd';\nimport {\n  deleteNote,\n  getNoteById,\n  getNotes,\n  postNote,\n  putNote,\n} from '../../../api/notes';\nimport {\n  editNoteSuccessAction,\n  getNotesInProgressAction,\n  modalNoteProgressAction,\n  modalNoteShowAction,\n  modalNoteSuccessAction,\n  getNotesAction,\n  getNoteListErrorAction,\n} from '../actions/actions';\n\nexport const getNoteList = () => Promise.resolve((dispatch) => {\n  dispatch(getNotesInProgressAction());\n  getNotes().then((response) => {\n    dispatch(getNotesAction(response.data));\n  })\n    .catch(() => dispatch(getNoteListErrorAction()));\n});\n\nexport const createNote = (note) => (dispatch) => {\n  dispatch(modalNoteProgressAction());\n  postNote(note).then(() => {\n    dispatch(modalNoteSuccessAction());\n    message.success('New Note was added');\n    dispatch(getNoteList());\n  });\n};\n\nexport const deleteNoteById = (id) => (dispatch) => {\n  dispatch(modalNoteProgressAction());\n  deleteNote(id).then(() => {\n    dispatch(modalNoteSuccessAction());\n    message.success('Note was deleted');\n    dispatch(getNoteList());\n  });\n};\n\nexport const editNote = (note, id) => (dispatch) => {\n  dispatch(modalNoteProgressAction());\n  putNote(note, id).then(() => {\n    dispatch(modalNoteSuccessAction());\n    message.success('Note was edited');\n    dispatch(getNoteList());\n  });\n};\n\nexport const getNoteForEdit = (id) => (dispatch) => {\n  dispatch(modalNoteShowAction('edit'));\n  dispatch(modalNoteProgressAction());\n  getNoteById(id).then((response) => {\n    dispatch(editNoteSuccessAction(response));\n  });\n};\n"]},"metadata":{},"sourceType":"module"}