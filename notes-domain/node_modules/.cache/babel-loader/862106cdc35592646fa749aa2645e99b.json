{"ast":null,"code":"'use strict';\n\nvar CONSTRUCTORS = {\n  Object: Object,\n  Array: Array,\n  Function: Function,\n  Number: Number,\n  String: String,\n  Date: Date,\n  RegExp: RegExp\n};\n\nmodule.exports = function defFunc(ajv) {\n  /* istanbul ignore else */\n  if (typeof Buffer != 'undefined') CONSTRUCTORS.Buffer = Buffer;\n  /* istanbul ignore else */\n\n  if (typeof Promise != 'undefined') CONSTRUCTORS.Promise = Promise;\n  defFunc.definition = {\n    compile: function (schema) {\n      if (typeof schema == 'string') {\n        var Constructor = getConstructor(schema);\n        return function (data) {\n          return data instanceof Constructor;\n        };\n      }\n\n      var constructors = schema.map(getConstructor);\n      return function (data) {\n        for (var i = 0; i < constructors.length; i++) if (data instanceof constructors[i]) return true;\n\n        return false;\n      };\n    },\n    CONSTRUCTORS: CONSTRUCTORS,\n    metaSchema: {\n      anyOf: [{\n        type: 'string'\n      }, {\n        type: 'array',\n        items: {\n          type: 'string'\n        }\n      }]\n    }\n  };\n  ajv.addKeyword('instanceof', defFunc.definition);\n  return ajv;\n\n  function getConstructor(c) {\n    var Constructor = CONSTRUCTORS[c];\n    if (Constructor) return Constructor;\n    throw new Error('invalid \"instanceof\" keyword value ' + c);\n  }\n};","map":{"version":3,"sources":["E:/agiliway_projects/agiliway_projects/notes-domain/node_modules/ajv-keywords/keywords/instanceof.js"],"names":["CONSTRUCTORS","Object","Array","Function","Number","String","Date","RegExp","module","exports","defFunc","ajv","Buffer","Promise","definition","compile","schema","Constructor","getConstructor","data","constructors","map","i","length","metaSchema","anyOf","type","items","addKeyword","c","Error"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAEA,MADS;AAEjBC,EAAAA,KAAK,EAAEA,KAFU;AAGjBC,EAAAA,QAAQ,EAAEA,QAHO;AAIjBC,EAAAA,MAAM,EAAEA,MAJS;AAKjBC,EAAAA,MAAM,EAAEA,MALS;AAMjBC,EAAAA,IAAI,EAAEA,IANW;AAOjBC,EAAAA,MAAM,EAAEA;AAPS,CAAnB;;AAUAC,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACrC;AACA,MAAI,OAAOC,MAAP,IAAiB,WAArB,EACEZ,YAAY,CAACY,MAAb,GAAsBA,MAAtB;AAEF;;AACA,MAAI,OAAOC,OAAP,IAAkB,WAAtB,EACEb,YAAY,CAACa,OAAb,GAAuBA,OAAvB;AAEFH,EAAAA,OAAO,CAACI,UAAR,GAAqB;AACnBC,IAAAA,OAAO,EAAE,UAAUC,MAAV,EAAkB;AACzB,UAAI,OAAOA,MAAP,IAAiB,QAArB,EAA+B;AAC7B,YAAIC,WAAW,GAAGC,cAAc,CAACF,MAAD,CAAhC;AACA,eAAO,UAAUG,IAAV,EAAgB;AACrB,iBAAOA,IAAI,YAAYF,WAAvB;AACD,SAFD;AAGD;;AAED,UAAIG,YAAY,GAAGJ,MAAM,CAACK,GAAP,CAAWH,cAAX,CAAnB;AACA,aAAO,UAAUC,IAAV,EAAgB;AACrB,aAAK,IAAIG,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,YAAY,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EACE,IAAIH,IAAI,YAAYC,YAAY,CAACE,CAAD,CAAhC,EAAqC,OAAO,IAAP;;AACvC,eAAO,KAAP;AACD,OAJD;AAKD,KAfkB;AAgBnBtB,IAAAA,YAAY,EAAEA,YAhBK;AAiBnBwB,IAAAA,UAAU,EAAE;AACVC,MAAAA,KAAK,EAAE,CACL;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADK,EAEL;AACEA,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,KAAK,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFT,OAFK;AADG;AAjBO,GAArB;AA4BAf,EAAAA,GAAG,CAACiB,UAAJ,CAAe,YAAf,EAA6BlB,OAAO,CAACI,UAArC;AACA,SAAOH,GAAP;;AAEA,WAASO,cAAT,CAAwBW,CAAxB,EAA2B;AACzB,QAAIZ,WAAW,GAAGjB,YAAY,CAAC6B,CAAD,CAA9B;AACA,QAAIZ,WAAJ,EAAiB,OAAOA,WAAP;AACjB,UAAM,IAAIa,KAAJ,CAAU,wCAAwCD,CAAlD,CAAN;AACD;AACF,CA7CD","sourcesContent":["'use strict';\r\n\r\nvar CONSTRUCTORS = {\r\n  Object: Object,\r\n  Array: Array,\r\n  Function: Function,\r\n  Number: Number,\r\n  String: String,\r\n  Date: Date,\r\n  RegExp: RegExp\r\n};\r\n\r\nmodule.exports = function defFunc(ajv) {\r\n  /* istanbul ignore else */\r\n  if (typeof Buffer != 'undefined')\r\n    CONSTRUCTORS.Buffer = Buffer;\r\n\r\n  /* istanbul ignore else */\r\n  if (typeof Promise != 'undefined')\r\n    CONSTRUCTORS.Promise = Promise;\r\n\r\n  defFunc.definition = {\r\n    compile: function (schema) {\r\n      if (typeof schema == 'string') {\r\n        var Constructor = getConstructor(schema);\r\n        return function (data) {\r\n          return data instanceof Constructor;\r\n        };\r\n      }\r\n\r\n      var constructors = schema.map(getConstructor);\r\n      return function (data) {\r\n        for (var i=0; i<constructors.length; i++)\r\n          if (data instanceof constructors[i]) return true;\r\n        return false;\r\n      };\r\n    },\r\n    CONSTRUCTORS: CONSTRUCTORS,\r\n    metaSchema: {\r\n      anyOf: [\r\n        { type: 'string' },\r\n        {\r\n          type: 'array',\r\n          items: { type: 'string' }\r\n        }\r\n      ]\r\n    }\r\n  };\r\n\r\n  ajv.addKeyword('instanceof', defFunc.definition);\r\n  return ajv;\r\n\r\n  function getConstructor(c) {\r\n    var Constructor = CONSTRUCTORS[c];\r\n    if (Constructor) return Constructor;\r\n    throw new Error('invalid \"instanceof\" keyword value ' + c);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}