{"ast":null,"code":"var _jsxFileName = \"E:\\\\React-apps\\\\notes-domain\\\\src\\\\pages\\\\Statistics\\\\Statistics.js\";\nimport { Table, Button, Space, Spin } from \"antd\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { closeNotes } from \"../Notes/actions/actions\";\nimport { loadingSelector, notesSelector } from \"../Notes/selectors/notesSelectors\";\nimport { getNoteList } from \"../Notes/thunks/notesThunk\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\"; // import moment from \"moment\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Statistics extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      filteredInfo: null,\n      sortedInfo: null\n    };\n\n    this.handleChange = (pagination, filters, sorter) => {\n      // console.log('Various parameters', pagination, filters, sorter);\n      this.setState({\n        filteredInfo: filters,\n        sortedInfo: sorter\n      });\n    };\n\n    this.clearFilters = () => {\n      this.setState({\n        filteredInfo: null\n      });\n    };\n\n    this.clearAll = () => {\n      this.setState({\n        filteredInfo: null,\n        sortedInfo: null\n      });\n    };\n\n    this.setAgeSort = () => {\n      this.setState({\n        sortedInfo: {\n          order: \"descend\",\n          columnKey: \"age\"\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.getData();\n  }\n\n  componentWillUnmount() {\n    this.props.closeNotes();\n  }\n\n  render() {\n    const {\n      data,\n      loading\n    } = this.props;\n    let {\n      sortedInfo,\n      filteredInfo\n    } = this.state;\n    sortedInfo = sortedInfo || {};\n    const data1 = {\n      uuid: data.uuid,\n      name: data.name,\n      author: data.author,\n      description: data.description,\n      createDate: moment(data.createDate).format(\"MMMM Do YYYY\")\n    };\n    filteredInfo = filteredInfo || {};\n    const columns = [{\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      filters: [{\n        text: \"Joe\",\n        value: \"Joe\"\n      }, {\n        text: \"Jim\",\n        value: \"Jim\"\n      }],\n      filteredValue: filteredInfo.name || null,\n      onFilter: (value, record) => record.name.includes(value),\n      sorter: (a, b) => a.name.length - b.name.length,\n      sortOrder: sortedInfo.columnKey === \"name\" && sortedInfo.order,\n      ellipsis: true\n    }, {\n      title: \"Author\",\n      dataIndex: \"author\",\n      key: \"author\",\n      sorter: (a, b) => a.author - b.author,\n      sortOrder: sortedInfo.columnKey === \"author\" && sortedInfo.order,\n      ellipsis: true\n    }, {\n      title: \"Description\",\n      dataIndex: \"description\",\n      key: \"description\",\n      filters: [{\n        text: \"London\",\n        value: \"London\"\n      }, {\n        text: \"New York\",\n        value: \"New York\"\n      }],\n      filteredValue: filteredInfo.description || null,\n      onFilter: (value, record) => record.description.includes(value),\n      sorter: (a, b) => a.description.length - b.description.length,\n      sortOrder: sortedInfo.columnKey === \"description\" && sortedInfo.order,\n      ellipsis: true\n    }, {\n      title: \"Creation Date\",\n      dataIndex: \"createDate\",\n      key: \"createDate\",\n      filters: [{\n        text: \"London\",\n        value: \"London\"\n      }, {\n        text: \"New York\",\n        value: \"New York\"\n      }],\n      filteredValue: filteredInfo.createDate || null,\n      onFilter: (value, record) => record.createDate.includes(value),\n      sorter: (a, b) => a.createDate.length - b.createDate.length,\n      sortOrder: sortedInfo.columnKey === \"createDate\" && sortedInfo.order,\n      ellipsis: true\n    }];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), \" Loading Statistics...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Space, {\n        style: {\n          marginBottom: 16\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.setAgeSort,\n          children: \"Sort age\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.clearFilters,\n          children: \"Clear filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.clearAll,\n          children: \"Clear filters and sorters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        columns: columns,\n        dataSource: data1,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  data: notesSelector(state),\n  loading: loadingSelector(state)\n});\n\nconst mapDispatchToProps = {\n  getData: getNoteList,\n  closeNotes: closeNotes\n};\nStatistics.propTypes = {\n  data: PropTypes.array,\n  loading: PropTypes.bool,\n  getData: PropTypes.func,\n  closeNotes: PropTypes.func\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Statistics);","map":{"version":3,"sources":["E:/React-apps/notes-domain/src/pages/Statistics/Statistics.js"],"names":["Table","Button","Space","Spin","React","connect","closeNotes","loadingSelector","notesSelector","getNoteList","PropTypes","moment","Statistics","Component","state","filteredInfo","sortedInfo","handleChange","pagination","filters","sorter","setState","clearFilters","clearAll","setAgeSort","order","columnKey","componentDidMount","props","getData","componentWillUnmount","render","data","loading","data1","uuid","name","author","description","createDate","format","columns","title","dataIndex","key","text","value","filteredValue","onFilter","record","includes","a","b","length","sortOrder","ellipsis","marginBottom","mapStateToProps","mapDispatchToProps","propTypes","array","bool","func"],"mappings":"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","sourcesContent":["import { Table, Button, Space, Spin } from \"antd\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { closeNotes } from \"../Notes/actions/actions\";\r\nimport { loadingSelector, notesSelector } from \"../Notes/selectors/notesSelectors\";\r\nimport { getNoteList } from \"../Notes/thunks/notesThunk\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\n// import moment from \"moment\";\r\n\r\nclass Statistics extends React.Component {\r\n  state = {\r\n    filteredInfo: null,\r\n    sortedInfo: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getData();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.closeNotes();\r\n  }\r\n\r\n  handleChange = (pagination, filters, sorter) => {\r\n    // console.log('Various parameters', pagination, filters, sorter);\r\n    this.setState({\r\n      filteredInfo: filters,\r\n      sortedInfo: sorter,\r\n    });\r\n  };\r\n\r\n  clearFilters = () => {\r\n    this.setState({ filteredInfo: null });\r\n  };\r\n\r\n  clearAll = () => {\r\n    this.setState({\r\n      filteredInfo: null,\r\n      sortedInfo: null,\r\n    });\r\n  };\r\n\r\n  setAgeSort = () => {\r\n    this.setState({\r\n      sortedInfo: {\r\n        order: \"descend\",\r\n        columnKey: \"age\",\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { data, loading } = this.props;\r\n    let { sortedInfo, filteredInfo } = this.state;\r\n    sortedInfo = sortedInfo || {};\r\n    const data1={\r\n      uuid: data.uuid,\r\n      name: data.name,\r\n      author: data.author,\r\n      description: data.description,\r\n      createDate: moment(data.createDate).format(\"MMMM Do YYYY\"),\r\n    }\r\n    filteredInfo = filteredInfo || {};\r\n    const columns = [\r\n      {\r\n        title: \"Name\",\r\n        dataIndex: \"name\",\r\n        key: \"name\",\r\n        filters: [\r\n          { text: \"Joe\", value: \"Joe\" },\r\n          { text: \"Jim\", value: \"Jim\" },\r\n        ],\r\n        filteredValue: filteredInfo.name || null,\r\n        onFilter: (value, record) => record.name.includes(value),\r\n        sorter: (a, b) => a.name.length - b.name.length,\r\n        sortOrder: sortedInfo.columnKey === \"name\" && sortedInfo.order,\r\n        ellipsis: true,\r\n      },\r\n      {\r\n        title: \"Author\",\r\n        dataIndex: \"author\",\r\n        key: \"author\",\r\n        sorter: (a, b) => a.author - b.author,\r\n        sortOrder: sortedInfo.columnKey === \"author\" && sortedInfo.order,\r\n        ellipsis: true,\r\n      },\r\n      {\r\n        title: \"Description\",\r\n        dataIndex: \"description\",\r\n        key: \"description\",\r\n        filters: [\r\n          { text: \"London\", value: \"London\" },\r\n          { text: \"New York\", value: \"New York\" },\r\n        ],\r\n        filteredValue: filteredInfo.description || null,\r\n        onFilter: (value, record) => record.description.includes(value),\r\n        sorter: (a, b) => a.description.length - b.description.length,\r\n        sortOrder: sortedInfo.columnKey === \"description\" && sortedInfo.order,\r\n        ellipsis: true,\r\n      },\r\n      {\r\n        title: \"Creation Date\",\r\n        dataIndex: \"createDate\",\r\n        key: \"createDate\",\r\n        filters: [\r\n          { text: \"London\", value: \"London\" },\r\n          { text: \"New York\", value: \"New York\" },\r\n        ],\r\n        filteredValue: filteredInfo.createDate || null,\r\n        onFilter: (value, record) => record.createDate.includes(value),\r\n        sorter: (a, b) => a.createDate.length - b.createDate.length,\r\n        sortOrder: sortedInfo.columnKey === \"createDate\" && sortedInfo.order,\r\n        ellipsis: true,\r\n      },\r\n    ];\r\n    return (\r\n      <>\r\n        {loading && (\r\n          <div>\r\n            <Spin /> Loading Statistics...\r\n          </div>\r\n        )}\r\n        <Space style={{ marginBottom: 16 }}>\r\n          <Button onClick={this.setAgeSort}>Sort age</Button>\r\n          <Button onClick={this.clearFilters}>Clear filters</Button>\r\n          <Button onClick={this.clearAll}>Clear filters and sorters</Button>\r\n        </Space>\r\n        <Table\r\n          columns={columns}\r\n          dataSource={data1}\r\n          onChange={this.handleChange}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  data: notesSelector(state),\r\n  loading: loadingSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getData: getNoteList,\r\n  closeNotes: closeNotes,\r\n};\r\n\r\nStatistics.propTypes = {\r\n  data: PropTypes.array,\r\n  loading: PropTypes.bool,\r\n  getData: PropTypes.func,\r\n  closeNotes: PropTypes.func,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Statistics);\r\n"]},"metadata":{},"sourceType":"module"}