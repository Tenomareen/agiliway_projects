{"ast":null,"code":"const MAX_SHORT_STRING = require('./wasm-hash').MAX_SHORT_STRING;\n\nclass BatchedHash {\n  constructor(hash) {\n    this.string = undefined;\n    this.encoding = undefined;\n    this.hash = hash;\n  }\n  /**\r\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\r\n   * @param {string|Buffer} data data\r\n   * @param {string=} inputEncoding data encoding\r\n   * @returns {this} updated hash\r\n   */\n\n\n  update(data, inputEncoding) {\n    if (this.string !== undefined) {\n      if (typeof data === 'string' && inputEncoding === this.encoding && this.string.length + data.length < MAX_SHORT_STRING) {\n        this.string += data;\n        return this;\n      }\n\n      this.hash.update(this.string, this.encoding);\n      this.string = undefined;\n    }\n\n    if (typeof data === 'string') {\n      if (data.length < MAX_SHORT_STRING && ( // base64 encoding is not valid since it may contain padding chars\n      !inputEncoding || !inputEncoding.startsWith('ba'))) {\n        this.string = data;\n        this.encoding = inputEncoding;\n      } else {\n        this.hash.update(data, inputEncoding);\n      }\n    } else {\n      this.hash.update(data);\n    }\n\n    return this;\n  }\n  /**\r\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\r\n   * @param {string=} encoding encoding of the return value\r\n   * @returns {string|Buffer} digest\r\n   */\n\n\n  digest(encoding) {\n    if (this.string !== undefined) {\n      this.hash.update(this.string, this.encoding);\n    }\n\n    return this.hash.digest(encoding);\n  }\n\n}\n\nmodule.exports = BatchedHash;","map":{"version":3,"sources":["E:/agiliway_projects/agiliway_projects/notes-domain/node_modules/loader-utils/lib/hash/BatchedHash.js"],"names":["MAX_SHORT_STRING","require","BatchedHash","constructor","hash","string","undefined","encoding","update","data","inputEncoding","length","startsWith","digest","module","exports"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,gBAAhD;;AAEA,MAAME,WAAN,CAAkB;AAChBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKC,MAAL,GAAcC,SAAd;AACA,SAAKC,QAAL,GAAgBD,SAAhB;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEI,EAAAA,MAAM,CAACC,IAAD,EAAOC,aAAP,EAAsB;AAC1B,QAAI,KAAKL,MAAL,KAAgBC,SAApB,EAA+B;AAC7B,UACE,OAAOG,IAAP,KAAgB,QAAhB,IACAC,aAAa,KAAK,KAAKH,QADvB,IAEA,KAAKF,MAAL,CAAYM,MAAZ,GAAqBF,IAAI,CAACE,MAA1B,GAAmCX,gBAHrC,EAIE;AACA,aAAKK,MAAL,IAAeI,IAAf;AAEA,eAAO,IAAP;AACD;;AAED,WAAKL,IAAL,CAAUI,MAAV,CAAiB,KAAKH,MAAtB,EAA8B,KAAKE,QAAnC;AACA,WAAKF,MAAL,GAAcC,SAAd;AACD;;AAED,QAAI,OAAOG,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UACEA,IAAI,CAACE,MAAL,GAAcX,gBAAd,MACA;AACC,OAACU,aAAD,IAAkB,CAACA,aAAa,CAACE,UAAd,CAAyB,IAAzB,CAFpB,CADF,EAIE;AACA,aAAKP,MAAL,GAAcI,IAAd;AACA,aAAKF,QAAL,GAAgBG,aAAhB;AACD,OAPD,MAOO;AACL,aAAKN,IAAL,CAAUI,MAAV,CAAiBC,IAAjB,EAAuBC,aAAvB;AACD;AACF,KAXD,MAWO;AACL,WAAKN,IAAL,CAAUI,MAAV,CAAiBC,IAAjB;AACD;;AAED,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEI,EAAAA,MAAM,CAACN,QAAD,EAAW;AACf,QAAI,KAAKF,MAAL,KAAgBC,SAApB,EAA+B;AAC7B,WAAKF,IAAL,CAAUI,MAAV,CAAiB,KAAKH,MAAtB,EAA8B,KAAKE,QAAnC;AACD;;AAED,WAAO,KAAKH,IAAL,CAAUS,MAAV,CAAiBN,QAAjB,CAAP;AACD;;AA1De;;AA6DlBO,MAAM,CAACC,OAAP,GAAiBb,WAAjB","sourcesContent":["const MAX_SHORT_STRING = require('./wasm-hash').MAX_SHORT_STRING;\r\n\r\nclass BatchedHash {\r\n  constructor(hash) {\r\n    this.string = undefined;\r\n    this.encoding = undefined;\r\n    this.hash = hash;\r\n  }\r\n\r\n  /**\r\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\r\n   * @param {string|Buffer} data data\r\n   * @param {string=} inputEncoding data encoding\r\n   * @returns {this} updated hash\r\n   */\r\n  update(data, inputEncoding) {\r\n    if (this.string !== undefined) {\r\n      if (\r\n        typeof data === 'string' &&\r\n        inputEncoding === this.encoding &&\r\n        this.string.length + data.length < MAX_SHORT_STRING\r\n      ) {\r\n        this.string += data;\r\n\r\n        return this;\r\n      }\r\n\r\n      this.hash.update(this.string, this.encoding);\r\n      this.string = undefined;\r\n    }\r\n\r\n    if (typeof data === 'string') {\r\n      if (\r\n        data.length < MAX_SHORT_STRING &&\r\n        // base64 encoding is not valid since it may contain padding chars\r\n        (!inputEncoding || !inputEncoding.startsWith('ba'))\r\n      ) {\r\n        this.string = data;\r\n        this.encoding = inputEncoding;\r\n      } else {\r\n        this.hash.update(data, inputEncoding);\r\n      }\r\n    } else {\r\n      this.hash.update(data);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\r\n   * @param {string=} encoding encoding of the return value\r\n   * @returns {string|Buffer} digest\r\n   */\r\n  digest(encoding) {\r\n    if (this.string !== undefined) {\r\n      this.hash.update(this.string, this.encoding);\r\n    }\r\n\r\n    return this.hash.digest(encoding);\r\n  }\r\n}\r\n\r\nmodule.exports = BatchedHash;\r\n"]},"metadata":{},"sourceType":"script"}