{"ast":null,"code":"var _jsxFileName = \"E:\\\\agiliway_projects\\\\agiliway_projects\\\\notes-domain\\\\src\\\\pages\\\\Statistics\\\\Statistics.js\";\nimport { Table, Button, Space, Spin } from \"antd\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { closeNotes } from \"../Notes/actions/actions\";\nimport { loadingSelector, notesSelector } from \"../Notes/selectors/notesSelectors\";\nimport { getNoteList } from \"../Notes/thunks/notesThunk\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Statistics extends React.Component {\n  constructor() {\n    super();\n\n    this.clearFilters = () => {\n      this.setState({\n        filteredInfo: null\n      });\n    };\n\n    this.clearAll = () => {\n      this.setState({\n        filteredInfo: null,\n        sortedInfo: null\n      });\n    };\n\n    this.setAgeSort = () => {\n      this.setState({\n        sortedInfo: {\n          order: \"descend\",\n          columnKey: \"age\"\n        }\n      });\n    };\n\n    state = {\n      filteredInfo: null,\n      sortedInfo: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.getData();\n  }\n\n  componentWillUnmount() {\n    this.props.closeNotes();\n  }\n\n  handleChange(filters, sorter) {\n    // console.log('Various parameters', pagination, filters, sorter);\n    this.setState({\n      filteredInfo: filters,\n      sortedInfo: sorter\n    });\n  }\n\n  render() {\n    const {\n      data,\n      loading\n    } = this.props;\n    let {\n      sortedInfo,\n      filteredInfo\n    } = this.state;\n    sortedInfo = sortedInfo || {};\n    filteredInfo = filteredInfo || {};\n    const columns = [{\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      filters: [{\n        text: \"Joe\",\n        value: \"Joe\"\n      }, {\n        text: \"Jim\",\n        value: \"Jim\"\n      }],\n      filteredValue: filteredInfo.name || null,\n      onFilter: (value, record) => record.name.includes(value),\n      sorter: (a, b) => a.name.length - b.name.length,\n      sortOrder: sortedInfo.columnKey === \"name\" && sortedInfo.order,\n      ellipsis: true\n    }, {\n      title: \"Author\",\n      dataIndex: \"author\",\n      key: \"author\",\n      sorter: (a, b) => a.author - b.author,\n      sortOrder: sortedInfo.columnKey === \"author\" && sortedInfo.order,\n      ellipsis: true\n    }, {\n      title: \"Description\",\n      dataIndex: \"description\",\n      key: \"description\",\n      filters: [{\n        text: \"London\",\n        value: \"London\"\n      }, {\n        text: \"New York\",\n        value: \"New York\"\n      }],\n      filteredValue: filteredInfo.description || null,\n      onFilter: (value, record) => record.description.includes(value),\n      sorter: (a, b) => a.description.length - b.description.length,\n      sortOrder: sortedInfo.columnKey === \"description\" && sortedInfo.order,\n      ellipsis: true\n    }, {\n      title: \"Creation Date\",\n      dataIndex: \"createDate\",\n      key: \"createDate\",\n      filters: [{\n        text: \"London\",\n        value: \"London\"\n      }, {\n        text: \"New York\",\n        value: \"New York\"\n      }],\n      filteredValue: filteredInfo.createDate || null,\n      onFilter: (value, record) => record.createDate.includes(value),\n      render: text => {\n        return moment(text).format(\"MMMM Do YYYY\");\n      },\n      sorter: (a, b) => a.createDate.length - b.createDate.length,\n      sortOrder: sortedInfo.columnKey === \"createDate\" && sortedInfo.order,\n      ellipsis: true\n    }];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), \" Loading Statistics...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Space, {\n        style: {\n          marginBottom: 16\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.setAgeSort,\n          children: \"Sort age\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.clearFilters,\n          children: \"Clear filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.clearAll,\n          children: \"Clear filters and sorters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        columns: columns,\n        dataSource: data,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  data: notesSelector(state),\n  loading: loadingSelector(state)\n});\n\nconst mapDispatchToProps = {\n  getData: getNoteList,\n  closeNotes: closeNotes\n};\nStatistics.propTypes = {\n  data: PropTypes.array,\n  loading: PropTypes.bool,\n  getData: PropTypes.func,\n  closeNotes: PropTypes.func\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Statistics);","map":{"version":3,"sources":["E:/agiliway_projects/agiliway_projects/notes-domain/src/pages/Statistics/Statistics.js"],"names":["Table","Button","Space","Spin","React","connect","closeNotes","loadingSelector","notesSelector","getNoteList","PropTypes","moment","Statistics","Component","constructor","clearFilters","setState","filteredInfo","clearAll","sortedInfo","setAgeSort","order","columnKey","state","componentDidMount","props","getData","componentWillUnmount","handleChange","filters","sorter","render","data","loading","columns","title","dataIndex","key","text","value","filteredValue","name","onFilter","record","includes","a","b","length","sortOrder","ellipsis","author","description","createDate","format","marginBottom","mapStateToProps","mapDispatchToProps","propTypes","array","bool","func"],"mappings":"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","sourcesContent":["import { Table, Button, Space, Spin } from \"antd\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { closeNotes } from \"../Notes/actions/actions\";\r\nimport { loadingSelector, notesSelector } from \"../Notes/selectors/notesSelectors\";\r\nimport { getNoteList } from \"../Notes/thunks/notesThunk\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nclass Statistics extends React.Component {\r\n  constructor() {\r\n  super()\r\n    state = {\r\n    filteredInfo: null,\r\n    sortedInfo: null,\r\n  };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getData();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.closeNotes();\r\n  }\r\n\r\n  handleChange(filters, sorter) {\r\n    // console.log('Various parameters', pagination, filters, sorter);\r\n    this.setState({\r\n      filteredInfo: filters,\r\n      sortedInfo: sorter,\r\n    });\r\n  };\r\n\r\n  clearFilters = () => {\r\n    this.setState({ filteredInfo: null });\r\n  };\r\n\r\n  clearAll = () => {\r\n    this.setState({\r\n      filteredInfo: null,\r\n      sortedInfo: null,\r\n    });\r\n  };\r\n\r\n  setAgeSort = () => {\r\n    this.setState({\r\n      sortedInfo: {\r\n        order: \"descend\",\r\n        columnKey: \"age\",\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { data, loading } = this.props;\r\n    let { sortedInfo, filteredInfo } = this.state;\r\n    sortedInfo = sortedInfo || {};\r\n    filteredInfo = filteredInfo || {};\r\n    const columns = [\r\n      {\r\n        title: \"Name\",\r\n        dataIndex: \"name\",\r\n        key: \"name\",\r\n        filters: [\r\n          { text: \"Joe\", value: \"Joe\" },\r\n          { text: \"Jim\", value: \"Jim\" },\r\n        ],\r\n        filteredValue: filteredInfo.name || null,\r\n        onFilter: (value, record) => record.name.includes(value),\r\n        sorter: (a, b) => a.name.length - b.name.length,\r\n        sortOrder: sortedInfo.columnKey === \"name\" && sortedInfo.order,\r\n        ellipsis: true,\r\n      },\r\n      {\r\n        title: \"Author\",\r\n        dataIndex: \"author\",\r\n        key: \"author\",\r\n        sorter: (a, b) => a.author - b.author,\r\n        sortOrder: sortedInfo.columnKey === \"author\" && sortedInfo.order,\r\n        ellipsis: true,\r\n      },\r\n      {\r\n        title: \"Description\",\r\n        dataIndex: \"description\",\r\n        key: \"description\",\r\n        filters: [\r\n          { text: \"London\", value: \"London\" },\r\n          { text: \"New York\", value: \"New York\" },\r\n        ],\r\n        filteredValue: filteredInfo.description || null,\r\n        onFilter: (value, record) => record.description.includes(value),\r\n        sorter: (a, b) => a.description.length - b.description.length,\r\n        sortOrder: sortedInfo.columnKey === \"description\" && sortedInfo.order,\r\n        ellipsis: true,\r\n      },\r\n      {\r\n        title: \"Creation Date\",\r\n        dataIndex: \"createDate\",\r\n        key: \"createDate\",\r\n        filters: [\r\n          { text: \"London\", value: \"London\" },\r\n          { text: \"New York\", value: \"New York\" },\r\n        ],\r\n        filteredValue: filteredInfo.createDate || null,\r\n        onFilter: (value, record) => record.createDate.includes(value),\r\n        render: (text) => {return moment(text).format(\"MMMM Do YYYY\")},\r\n        sorter: (a, b) => a.createDate.length - b.createDate.length,\r\n        sortOrder: sortedInfo.columnKey === \"createDate\" && sortedInfo.order,\r\n        ellipsis: true,\r\n      },\r\n    ];\r\n    return (\r\n      <>\r\n        {loading && (\r\n          <div>\r\n            <Spin /> Loading Statistics...\r\n          </div>\r\n        )}\r\n        <Space style={{ marginBottom: 16 }}>\r\n          <Button onClick={this.setAgeSort}>Sort age</Button>\r\n          <Button onClick={this.clearFilters}>Clear filters</Button>\r\n          <Button onClick={this.clearAll}>Clear filters and sorters</Button>\r\n        </Space>\r\n        <Table\r\n          columns={columns}\r\n          dataSource={data}\r\n          onChange={this.handleChange}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  data: notesSelector(state),\r\n  loading: loadingSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getData: getNoteList,\r\n  closeNotes: closeNotes,\r\n};\r\n\r\nStatistics.propTypes = {\r\n  data: PropTypes.array,\r\n  loading: PropTypes.bool,\r\n  getData: PropTypes.func,\r\n  closeNotes: PropTypes.func,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Statistics);\r\n"]},"metadata":{},"sourceType":"module"}