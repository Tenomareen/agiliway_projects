{"ast":null,"code":"'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'number',\n    macro: function (schema, parentSchema) {\n      var min = schema[0],\n          max = schema[1],\n          exclusive = parentSchema.exclusiveRange;\n      validateRangeSchema(min, max, exclusive);\n      return exclusive === true ? {\n        exclusiveMinimum: min,\n        exclusiveMaximum: max\n      } : {\n        minimum: min,\n        maximum: max\n      };\n    },\n    metaSchema: {\n      type: 'array',\n      minItems: 2,\n      maxItems: 2,\n      items: {\n        type: 'number'\n      }\n    }\n  };\n  ajv.addKeyword('range', defFunc.definition);\n  ajv.addKeyword('exclusiveRange');\n  return ajv;\n\n  function validateRangeSchema(min, max, exclusive) {\n    if (exclusive !== undefined && typeof exclusive != 'boolean') throw new Error('Invalid schema for exclusiveRange keyword, should be boolean');\n    if (min > max || exclusive && min == max) throw new Error('There are no numbers in range');\n  }\n};","map":{"version":3,"sources":["E:/agiliway_projects/agiliway_projects/notes-domain/node_modules/ajv-keywords/keywords/range.js"],"names":["module","exports","defFunc","ajv","definition","type","macro","schema","parentSchema","min","max","exclusive","exclusiveRange","validateRangeSchema","exclusiveMinimum","exclusiveMaximum","minimum","maximum","metaSchema","minItems","maxItems","items","addKeyword","undefined","Error"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACrCD,EAAAA,OAAO,CAACE,UAAR,GAAqB;AACnBC,IAAAA,IAAI,EAAE,QADa;AAEnBC,IAAAA,KAAK,EAAE,UAAUC,MAAV,EAAkBC,YAAlB,EAAgC;AACrC,UAAIC,GAAG,GAAGF,MAAM,CAAC,CAAD,CAAhB;AAAA,UACIG,GAAG,GAAGH,MAAM,CAAC,CAAD,CADhB;AAAA,UAEII,SAAS,GAAGH,YAAY,CAACI,cAF7B;AAIAC,MAAAA,mBAAmB,CAACJ,GAAD,EAAMC,GAAN,EAAWC,SAAX,CAAnB;AAEA,aAAOA,SAAS,KAAK,IAAd,GACG;AAACG,QAAAA,gBAAgB,EAAEL,GAAnB;AAAwBM,QAAAA,gBAAgB,EAAEL;AAA1C,OADH,GAEG;AAACM,QAAAA,OAAO,EAAEP,GAAV;AAAeQ,QAAAA,OAAO,EAAEP;AAAxB,OAFV;AAGD,KAZkB;AAanBQ,IAAAA,UAAU,EAAE;AACVb,MAAAA,IAAI,EAAE,OADI;AAEVc,MAAAA,QAAQ,EAAE,CAFA;AAGVC,MAAAA,QAAQ,EAAE,CAHA;AAIVC,MAAAA,KAAK,EAAE;AAAEhB,QAAAA,IAAI,EAAE;AAAR;AAJG;AAbO,GAArB;AAqBAF,EAAAA,GAAG,CAACmB,UAAJ,CAAe,OAAf,EAAwBpB,OAAO,CAACE,UAAhC;AACAD,EAAAA,GAAG,CAACmB,UAAJ,CAAe,gBAAf;AACA,SAAOnB,GAAP;;AAEA,WAASU,mBAAT,CAA6BJ,GAA7B,EAAkCC,GAAlC,EAAuCC,SAAvC,EAAkD;AAChD,QAAIA,SAAS,KAAKY,SAAd,IAA2B,OAAOZ,SAAP,IAAoB,SAAnD,EACE,MAAM,IAAIa,KAAJ,CAAU,8DAAV,CAAN;AAEF,QAAIf,GAAG,GAAGC,GAAN,IAAcC,SAAS,IAAIF,GAAG,IAAIC,GAAtC,EACE,MAAM,IAAIc,KAAJ,CAAU,+BAAV,CAAN;AACH;AACF,CAjCD","sourcesContent":["'use strict';\r\n\r\nmodule.exports = function defFunc(ajv) {\r\n  defFunc.definition = {\r\n    type: 'number',\r\n    macro: function (schema, parentSchema) {\r\n      var min = schema[0]\r\n        , max = schema[1]\r\n        , exclusive = parentSchema.exclusiveRange;\r\n\r\n      validateRangeSchema(min, max, exclusive);\r\n\r\n      return exclusive === true\r\n              ? {exclusiveMinimum: min, exclusiveMaximum: max}\r\n              : {minimum: min, maximum: max};\r\n    },\r\n    metaSchema: {\r\n      type: 'array',\r\n      minItems: 2,\r\n      maxItems: 2,\r\n      items: { type: 'number' }\r\n    }\r\n  };\r\n\r\n  ajv.addKeyword('range', defFunc.definition);\r\n  ajv.addKeyword('exclusiveRange');\r\n  return ajv;\r\n\r\n  function validateRangeSchema(min, max, exclusive) {\r\n    if (exclusive !== undefined && typeof exclusive != 'boolean')\r\n      throw new Error('Invalid schema for exclusiveRange keyword, should be boolean');\r\n\r\n    if (min > max || (exclusive && min == max))\r\n      throw new Error('There are no numbers in range');\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}