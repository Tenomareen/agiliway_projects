{"ast":null,"code":"var _jsxFileName = \"E:\\\\agiliway_projects\\\\agiliway_projects\\\\notes-domain\\\\src\\\\pages\\\\Notes\\\\NoteList.js\";\nimport React, { Component } from 'react';\nimport Note from './Note';\nimport { connect } from 'react-redux';\nimport { Row, Button, Empty, Spin } from 'antd';\nimport ModalAdd from './ModalAdd/ModalCreate';\nimport ModalDelete from './ModalDelete/ModalDelete';\nimport ModalEdit from './ModalEdit/ModalEdit';\nimport PropTypes from 'prop-types';\nimport { closeNotes, modalNoteCloseAction, modalNoteShowAction } from './actions/actions';\nimport { createNote, deleteNoteById, editNote, getNoteForEdit, getNoteList } from './thunks/notesThunk';\nimport { loadingSelector, notesSelector } from './selectors/notesSelectors';\nimport { idSelector, modalLoadingSelector, noteEditSelector, typeSelector } from './selectors/modalSelectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass NoteList extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleSubmit = editValues => {\n      const note = {\n        name: editValues.name,\n        author: editValues.author,\n        description: editValues.description\n      };\n      this.props.handleSubmitEdit(note, editValues.uuid);\n    };\n  }\n\n  componentDidMount() {\n    this.props.getData();\n  }\n\n  componentWillUnmount() {\n    this.props.closeNotes();\n  }\n\n  render() {\n    const {\n      type,\n      loading,\n      notes,\n      noteEdit,\n      id,\n      loadingModal\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-around'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          onClick: () => this.props.showModal('create'),\n          children: \"Add New Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"site-card-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          gutter: 16,\n          style: {\n            justifyContent: 'space-around'\n          },\n          children: [!notes.length && !loading && /*#__PURE__*/_jsxDEV(Empty, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 45\n          }, this), !loading && notes.map((note, index) => {\n            return /*#__PURE__*/_jsxDEV(Note, {\n              note: note,\n              showModalDelete: this.props.showModal,\n              getNote: this.props.getNote\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 28\n          }, this), \" Loading Note List...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 23\n        }, this), type === 'create' && /*#__PURE__*/_jsxDEV(ModalAdd, {\n          visible: true,\n          closeModal: this.props.closeModal,\n          handleSubmitCreate: this.props.handleSubmitCreate,\n          loading: loadingModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), type === 'delete' && /*#__PURE__*/_jsxDEV(ModalDelete, {\n          id: id,\n          visible: true,\n          handleDelete: this.props.handleDelete,\n          closeModal: this.props.closeModal,\n          loading: loadingModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), type === 'edit' && /*#__PURE__*/_jsxDEV(ModalEdit, {\n          visible: true,\n          closeModal: this.props.closeModal,\n          noteEdit: noteEdit,\n          handleSubmitEdit: this.handleSubmit,\n          loading: loadingModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  type: typeSelector(state),\n  notes: notesSelector(state),\n  loading: loadingSelector(state),\n  noteEdit: noteEditSelector(state),\n  id: idSelector(state),\n  loadingModal: modalLoadingSelector(state)\n});\n\nconst mapDispatchToProps = {\n  getData: getNoteList,\n  showModal: modalNoteShowAction,\n  handleDelete: deleteNoteById,\n  closeModal: modalNoteCloseAction,\n  handleSubmitEdit: editNote,\n  handleSubmitCreate: createNote,\n  getNote: getNoteForEdit,\n  closeNotes: closeNotes\n};\nNoteList.propTypes = {\n  type: PropTypes.string,\n  notes: PropTypes.array,\n  loading: PropTypes.bool,\n  noteEdit: PropTypes.object,\n  id: PropTypes.string,\n  loadingModal: PropTypes.bool,\n  getData: PropTypes.func,\n  showModal: PropTypes.func,\n  handleDelete: PropTypes.func,\n  closeModal: PropTypes.func,\n  handleSubmitEdit: PropTypes.func,\n  handleSubmitCreate: PropTypes.func,\n  getNote: PropTypes.func,\n  closeNotes: PropTypes.func\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteList);","map":{"version":3,"sources":["E:/agiliway_projects/agiliway_projects/notes-domain/src/pages/Notes/NoteList.js"],"names":["React","Component","Note","connect","Row","Button","Empty","Spin","ModalAdd","ModalDelete","ModalEdit","PropTypes","closeNotes","modalNoteCloseAction","modalNoteShowAction","createNote","deleteNoteById","editNote","getNoteForEdit","getNoteList","loadingSelector","notesSelector","idSelector","modalLoadingSelector","noteEditSelector","typeSelector","NoteList","handleSubmit","editValues","note","name","author","description","props","handleSubmitEdit","uuid","componentDidMount","getData","componentWillUnmount","render","type","loading","notes","noteEdit","id","loadingModal","display","justifyContent","showModal","length","map","index","getNote","closeModal","handleSubmitCreate","handleDelete","mapStateToProps","state","mapDispatchToProps","propTypes","string","array","bool","object","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Note from './Note';\nimport { connect } from 'react-redux';\nimport { Row, Button, Empty, Spin } from 'antd';\nimport ModalAdd from './ModalAdd/ModalCreate';\nimport ModalDelete from './ModalDelete/ModalDelete';\nimport ModalEdit from './ModalEdit/ModalEdit';\nimport PropTypes from 'prop-types';\nimport { closeNotes, modalNoteCloseAction, modalNoteShowAction } from './actions/actions';\nimport {\n  createNote,\n  deleteNoteById,\n  editNote,\n  getNoteForEdit,\n  getNoteList,\n} from './thunks/notesThunk';\nimport { loadingSelector, notesSelector } from './selectors/notesSelectors';\nimport { idSelector, modalLoadingSelector, noteEditSelector, typeSelector } from './selectors/modalSelectors';\n\nclass NoteList extends Component {\n  componentDidMount() {\n    this.props.getData();\n  }\n\n  componentWillUnmount() {\n    this.props.closeNotes();\n  }\n\n  handleSubmit = (editValues) => {\n    const note = {\n      name: editValues.name,\n      author: editValues.author,\n      description: editValues.description,\n    };\n    this.props.handleSubmitEdit(note, editValues.uuid);\n  };\n\n  render() {\n    const { type, loading, notes, noteEdit, id, loadingModal } = this.props;\n    return (\n      <>\n        <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n          <h1>Notes</h1>\n          <Button type='primary' onClick={() => this.props.showModal('create')}>\n            Add New Note\n          </Button>\n        </div>\n        <div className='site-card-wrapper'>\n          <Row gutter={16} style={{ justifyContent: 'space-around' }}>\n            {(!notes.length && !loading) && <Empty />}\n            {!loading &&\n              notes.map((note, index) => {\n                return (\n                  <Note\n                    key={index}\n                    note={note}\n                    showModalDelete={this.props.showModal}\n                    getNote={this.props.getNote}\n                  />\n                );\n              })}\n          </Row>\n          {loading && <div><Spin/> Loading Note List...</div>}\n          {type === 'create' && (\n            <ModalAdd\n              visible={true}\n              closeModal={this.props.closeModal}\n              handleSubmitCreate={this.props.handleSubmitCreate}\n              loading={loadingModal}\n            />\n          )}\n          {type === 'delete' && (\n            <ModalDelete\n              id={id}\n              visible={true}\n              handleDelete={this.props.handleDelete}\n              closeModal={this.props.closeModal}\n              loading={loadingModal}\n            />\n          )}\n          {type === 'edit' && (\n            <ModalEdit\n              visible={true}\n              closeModal={this.props.closeModal}\n              noteEdit={noteEdit}\n              handleSubmitEdit={this.handleSubmit}\n              loading={loadingModal}\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  type: typeSelector(state),\n  notes: notesSelector(state),\n  loading: loadingSelector(state),\n  noteEdit: noteEditSelector(state),\n  id: idSelector(state),\n  loadingModal: modalLoadingSelector(state),\n});\n\nconst mapDispatchToProps = {\n  getData: getNoteList,\n  showModal: modalNoteShowAction,\n  handleDelete: deleteNoteById,\n  closeModal: modalNoteCloseAction,\n  handleSubmitEdit: editNote,\n  handleSubmitCreate: createNote,\n  getNote: getNoteForEdit,\n  closeNotes: closeNotes,\n};\n\nNoteList.propTypes = {\n  type: PropTypes.string,\n  notes: PropTypes.array,\n  loading: PropTypes.bool,\n  noteEdit: PropTypes.object,\n  id: PropTypes.string,\n  loadingModal: PropTypes.bool,\n  getData: PropTypes.func,\n  showModal: PropTypes.func,\n  handleDelete: PropTypes.func,\n  closeModal: PropTypes.func,\n  handleSubmitEdit: PropTypes.func,\n  handleSubmitCreate: PropTypes.func,\n  getNote: PropTypes.func,\n  closeNotes: PropTypes.func,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteList);\n"]},"metadata":{},"sourceType":"module"}