{"ast":null,"code":"var _jsxFileName = \"E:\\\\React-apps\\\\notes-domain\\\\src\\\\pages\\\\Statistics\\\\Statistics.js\";\nimport { Table, Button, Space } from 'antd';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getNoteList } from '../../store/notesThunk';\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Statistics extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      filteredInfo: null,\n      sortedInfo: null\n    };\n\n    this.handleChange = (pagination, filters, sorter) => {\n      // console.log('Various parameters', pagination, filters, sorter);\n      this.setState({\n        filteredInfo: filters,\n        sortedInfo: sorter\n      });\n    };\n\n    this.clearFilters = () => {\n      this.setState({\n        filteredInfo: null\n      });\n    };\n\n    this.clearAll = () => {\n      this.setState({\n        filteredInfo: null,\n        sortedInfo: null\n      });\n    };\n\n    this.setAgeSort = () => {\n      this.setState({\n        sortedInfo: {\n          order: 'descend',\n          columnKey: 'age'\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.getData();\n  }\n\n  render() {\n    const {\n      data\n    } = this.props;\n    const data1 = { ...data,\n      createDate: moment(data.createDate).format(\"MMMM Do YYYY\")\n    };\n    let {\n      sortedInfo,\n      filteredInfo\n    } = this.state;\n    sortedInfo = sortedInfo || {};\n    filteredInfo = filteredInfo || {};\n    const columns = [{\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      filters: [{\n        text: 'Joe',\n        value: 'Joe'\n      }, {\n        text: 'Jim',\n        value: 'Jim'\n      }],\n      filteredValue: filteredInfo.name || null,\n      onFilter: (value, record) => record.name.includes(value),\n      sorter: (a, b) => a.name.length - b.name.length,\n      sortOrder: sortedInfo.columnKey === 'name' && sortedInfo.order,\n      ellipsis: true\n    }, {\n      title: 'Author',\n      dataIndex: 'author',\n      key: 'author',\n      sorter: (a, b) => a.author - b.author,\n      sortOrder: sortedInfo.columnKey === 'author' && sortedInfo.order,\n      ellipsis: true\n    }, {\n      title: 'Description',\n      dataIndex: 'description',\n      key: 'description',\n      filters: [{\n        text: 'London',\n        value: 'London'\n      }, {\n        text: 'New York',\n        value: 'New York'\n      }],\n      filteredValue: filteredInfo.description || null,\n      onFilter: (value, record) => record.description.includes(value),\n      sorter: (a, b) => a.description.length - b.description.length,\n      sortOrder: sortedInfo.columnKey === 'description' && sortedInfo.order,\n      ellipsis: true\n    }, {\n      title: 'Creation Date',\n      dataIndex: 'createDate',\n      key: 'createDate',\n      filters: [{\n        text: 'London',\n        value: 'London'\n      }, {\n        text: 'New York',\n        value: 'New York'\n      }],\n      filteredValue: filteredInfo.createDate || null,\n      onFilter: (value, record) => record.createDate.includes(moment(value).format(\"MMMM Do YYYY\")),\n      sorter: (a, b) => a.createDate.length - b.createDate.length,\n      sortOrder: sortedInfo.columnKey === 'createDate' && sortedInfo.order,\n      ellipsis: true\n    }];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Space, {\n        style: {\n          marginBottom: 16\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.setAgeSort,\n          children: \"Sort age\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.clearFilters,\n          children: \"Clear filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.clearAll,\n          children: \"Clear filters and sorters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        columns: columns,\n        dataSource: this.data1,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  data: state.notes.noteList\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getData: () => {\n      dispatch(getNoteList());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Statistics);","map":{"version":3,"sources":["E:/React-apps/notes-domain/src/pages/Statistics/Statistics.js"],"names":["Table","Button","Space","React","connect","getNoteList","moment","Statistics","Component","state","filteredInfo","sortedInfo","handleChange","pagination","filters","sorter","setState","clearFilters","clearAll","setAgeSort","order","columnKey","componentDidMount","props","getData","render","data","data1","createDate","format","columns","title","dataIndex","key","text","value","filteredValue","name","onFilter","record","includes","a","b","length","sortOrder","ellipsis","author","description","marginBottom","mapStateToProps","notes","noteList","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { Table, Button, Space } from 'antd';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getNoteList } from '../../store/notesThunk';\r\nimport moment from \"moment\";\r\n\r\nclass Statistics extends React.Component {\r\n  state = {\r\n    filteredInfo: null,\r\n    sortedInfo: null,\r\n  };\r\n\r\ncomponentDidMount() {\r\n    this.props.getData();\r\n}\r\n\r\n  handleChange = (pagination, filters, sorter) => {\r\n    // console.log('Various parameters', pagination, filters, sorter);\r\n    this.setState({\r\n      filteredInfo: filters,\r\n      sortedInfo: sorter,\r\n    });\r\n  };\r\n\r\n  clearFilters = () => {\r\n    this.setState({ filteredInfo: null });\r\n  };\r\n\r\n  clearAll = () => {\r\n    this.setState({\r\n      filteredInfo: null,\r\n      sortedInfo: null,\r\n    });\r\n  };\r\n\r\n  setAgeSort = () => {\r\n    this.setState({\r\n      sortedInfo: {\r\n        order: 'descend',\r\n        columnKey: 'age',\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { data } = this.props;\r\n    const data1 = { ...data, createDate: moment(data.createDate).format(\"MMMM Do YYYY\") }\r\n    let { sortedInfo, filteredInfo } = this.state;\r\n    sortedInfo = sortedInfo || {};\r\n    filteredInfo = filteredInfo || {};\r\n    const columns = [\r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        filters: [\r\n          { text: 'Joe', value: 'Joe' },\r\n          { text: 'Jim', value: 'Jim' },\r\n        ],\r\n        filteredValue: filteredInfo.name || null,\r\n        onFilter: (value, record) => record.name.includes(value),\r\n        sorter: (a, b) => a.name.length - b.name.length,\r\n        sortOrder: sortedInfo.columnKey === 'name' && sortedInfo.order,\r\n        ellipsis: true,\r\n      },\r\n      {\r\n        title: 'Author',\r\n        dataIndex: 'author',\r\n        key: 'author',\r\n        sorter: (a, b) => a.author - b.author,\r\n        sortOrder: sortedInfo.columnKey === 'author' && sortedInfo.order,\r\n        ellipsis: true,\r\n      },\r\n      {\r\n        title: 'Description',\r\n        dataIndex: 'description',\r\n        key: 'description',\r\n        filters: [\r\n          { text: 'London', value: 'London' },\r\n          { text: 'New York', value: 'New York' },\r\n        ],\r\n        filteredValue: filteredInfo.description || null,\r\n        onFilter: (value, record) => record.description.includes(value),\r\n        sorter: (a, b) => a.description.length - b.description.length,\r\n        sortOrder: sortedInfo.columnKey === 'description' && sortedInfo.order,\r\n        ellipsis: true,\r\n      },\r\n      {\r\n        title: 'Creation Date',\r\n        dataIndex: 'createDate',\r\n        key: 'createDate',\r\n        filters: [\r\n          { text: 'London', value: 'London' },\r\n          { text: 'New York', value: 'New York' },\r\n        ],\r\n        filteredValue: filteredInfo.createDate || null,\r\n        onFilter: (value, record) => record.createDate.includes(moment(value).format(\"MMMM Do YYYY\")),\r\n        sorter: (a, b) => a.createDate.length - b.createDate.length,\r\n        sortOrder: sortedInfo.columnKey === 'createDate' && sortedInfo.order,\r\n        ellipsis: true,\r\n      },\r\n    ];\r\n    return (\r\n      <>\r\n        <Space style={{ marginBottom: 16 }}>\r\n          <Button onClick={this.setAgeSort}>Sort age</Button>\r\n          <Button onClick={this.clearFilters}>Clear filters</Button>\r\n          <Button onClick={this.clearAll}>Clear filters and sorters</Button>\r\n        </Space>\r\n        <Table columns={columns} dataSource={this.data1} onChange={this.handleChange} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    data: state.notes.noteList,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getData: () => {\r\n            dispatch(getNoteList());\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Statistics);"]},"metadata":{},"sourceType":"module"}