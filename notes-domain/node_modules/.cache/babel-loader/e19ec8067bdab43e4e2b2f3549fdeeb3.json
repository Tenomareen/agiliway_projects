{"ast":null,"code":"import { message } from \"antd\";\nimport { deleteNote, getNoteById, getNotes, postNote, putNote } from \"../api/notes\";\nimport { editModalNoteShowAction, editNoteSuccessAction, modalNoteProgressAction, modalNoteSuccessAction } from \"./reducers/modalReducer\";\nimport { getNotesAction } from \"./reducers/notesReducer\";\nexport const getNoteList = () => {\n  return dispatch => {\n    getNotes().then(response => {\n      dispatch(getNotesAction(response.data));\n    });\n  };\n};\nexport const createNote = note => {\n  return dispatch => {\n    dispatch(modalNoteProgressAction());\n    postNote(note).then(() => {\n      dispatch(modalNoteSuccessAction());\n      message.success(\"New Note was added\");\n      dispatch(getNoteList());\n    });\n  };\n};\nexport const deleteNoteById = id => {\n  return dispatch => {\n    dispatch(modalNoteProgressAction());\n    deleteNote(id).then(() => {\n      dispatch(modalNoteSuccessAction());\n      message.success(\"Note was deleted\");\n      dispatch(getNoteList());\n    });\n  };\n};\nexport const editNote = (note, id) => {\n  return dispatch => {\n    putNote(note, id).then(() => {\n      dispatch(modalNoteSuccessAction());\n      message.success(\"Note was edited\");\n      dispatch(getNoteList());\n    });\n  };\n};\nexport const getNoteForEdit = id => {\n  return dispatch => {\n    dispatch(editModalNoteShowAction());\n    dispatch(modalNoteProgressAction());\n    getNoteById(id).then(response => {\n      dispatch(editNoteSuccessAction(response));\n    });\n  };\n};","map":{"version":3,"sources":["E:/React-apps/notes-domain/src/store/notesThunk.js"],"names":["message","deleteNote","getNoteById","getNotes","postNote","putNote","editModalNoteShowAction","editNoteSuccessAction","modalNoteProgressAction","modalNoteSuccessAction","getNotesAction","getNoteList","dispatch","then","response","data","createNote","note","success","deleteNoteById","id","editNote","getNoteForEdit"],"mappings":"AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,SACEC,UADF,EAEEC,WAFF,EAGEC,QAHF,EAIEC,QAJF,EAKEC,OALF,QAMO,cANP;AAOA,SACEC,uBADF,EAEIC,qBAFJ,EAGEC,uBAHF,EAIEC,sBAJF,QAKO,yBALP;AAMA,SAASC,cAAT,QAA+B,yBAA/B;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,SAAQC,QAAD,IAAc;AACnBT,IAAAA,QAAQ,GAAGU,IAAX,CAAiBC,QAAD,IAAc;AAC5BF,MAAAA,QAAQ,CAACF,cAAc,CAACI,QAAQ,CAACC,IAAV,CAAf,CAAR;AACD,KAFD;AAGD,GAJD;AAKD,CANM;AAQP,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAClC,SAAQL,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACJ,uBAAuB,EAAxB,CAAR;AACAJ,IAAAA,QAAQ,CAACa,IAAD,CAAR,CAAeJ,IAAf,CAAoB,MAAM;AACxBD,MAAAA,QAAQ,CAACH,sBAAsB,EAAvB,CAAR;AACAT,MAAAA,OAAO,CAACkB,OAAR,CAAgB,oBAAhB;AACAN,MAAAA,QAAQ,CAACD,WAAW,EAAZ,CAAR;AACD,KAJD;AAKD,GAPD;AAQD,CATM;AAWP,OAAO,MAAMQ,cAAc,GAAIC,EAAD,IAAQ;AACpC,SAAQR,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACJ,uBAAuB,EAAxB,CAAR;AACAP,IAAAA,UAAU,CAACmB,EAAD,CAAV,CAAeP,IAAf,CAAoB,MAAM;AACxBD,MAAAA,QAAQ,CAACH,sBAAsB,EAAvB,CAAR;AACAT,MAAAA,OAAO,CAACkB,OAAR,CAAgB,kBAAhB;AACAN,MAAAA,QAAQ,CAACD,WAAW,EAAZ,CAAR;AACD,KAJD;AAKD,GAPD;AAQD,CATM;AAWP,OAAO,MAAMU,QAAQ,GAAG,CAACJ,IAAD,EAAOG,EAAP,KAAc;AACpC,SAAQR,QAAD,IAAc;AACnBP,IAAAA,OAAO,CAACY,IAAD,EAAOG,EAAP,CAAP,CAAkBP,IAAlB,CAAuB,MAAM;AAC3BD,MAAAA,QAAQ,CAACH,sBAAsB,EAAvB,CAAR;AACAT,MAAAA,OAAO,CAACkB,OAAR,CAAgB,iBAAhB;AACAN,MAAAA,QAAQ,CAACD,WAAW,EAAZ,CAAR;AACD,KAJD;AAKD,GAND;AAOD,CARM;AAUP,OAAO,MAAMW,cAAc,GAAIF,EAAD,IAAQ;AACpC,SAAQR,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACN,uBAAuB,EAAxB,CAAR;AACAM,IAAAA,QAAQ,CAACJ,uBAAuB,EAAxB,CAAR;AACAN,IAAAA,WAAW,CAACkB,EAAD,CAAX,CAAgBP,IAAhB,CAAsBC,QAAD,IAAc;AACjCF,MAAAA,QAAQ,CAACL,qBAAqB,CAACO,QAAD,CAAtB,CAAR;AACD,KAFD;AAGD,GAND;AAOD,CARM","sourcesContent":["import { message } from \"antd\";\r\nimport {\r\n  deleteNote,\r\n  getNoteById,\r\n  getNotes,\r\n  postNote,\r\n  putNote,\r\n} from \"../api/notes\";\r\nimport {\r\n  editModalNoteShowAction,\r\n    editNoteSuccessAction,\r\n  modalNoteProgressAction,\r\n  modalNoteSuccessAction,\r\n} from \"./reducers/modalReducer\";\r\nimport { getNotesAction } from \"./reducers/notesReducer\";\r\n\r\nexport const getNoteList = () => {\r\n  return (dispatch) => {\r\n    getNotes().then((response) => {\r\n      dispatch(getNotesAction(response.data));\r\n    });\r\n  };\r\n};\r\n\r\nexport const createNote = (note) => {\r\n  return (dispatch) => {\r\n    dispatch(modalNoteProgressAction());\r\n    postNote(note).then(() => {\r\n      dispatch(modalNoteSuccessAction());\r\n      message.success(\"New Note was added\");\r\n      dispatch(getNoteList());\r\n    });\r\n  };\r\n};\r\n\r\nexport const deleteNoteById = (id) => {\r\n  return (dispatch) => {\r\n    dispatch(modalNoteProgressAction());\r\n    deleteNote(id).then(() => {\r\n      dispatch(modalNoteSuccessAction());\r\n      message.success(\"Note was deleted\");\r\n      dispatch(getNoteList());\r\n    });\r\n  };\r\n};\r\n\r\nexport const editNote = (note, id) => {\r\n  return (dispatch) => {\r\n    putNote(note, id).then(() => {\r\n      dispatch(modalNoteSuccessAction());\r\n      message.success(\"Note was edited\");\r\n      dispatch(getNoteList());\r\n    });\r\n  };\r\n};\r\n\r\nexport const getNoteForEdit = (id) => {\r\n  return (dispatch) => {\r\n    dispatch(editModalNoteShowAction());\r\n    dispatch(modalNoteProgressAction());\r\n    getNoteById(id).then((response) => {\r\n      dispatch(editNoteSuccessAction(response));\r\n    });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}